package signmaintenance;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import com.github.lgooddatepicker.components.DatePicker;
import com.github.lgooddatepicker.components.TimePicker;
import java.awt.Frame;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.time.format.DateTimeFormatter;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JFileChooser;

/**
 *
 * @author User
 */
public class FormGUI extends javax.swing.JFrame {

    public CitySign sign;
    public CitySign previousSign;
    public DataIO io;
    public static File[] dirFiles;
    public boolean mongoDocExist;

    String dataSourceAbsPath;
    String imagesAbsPath;
    String locationsAbsPath = dataSourceAbsPath;

    // Form data fields
    public static String fileName, fileNo, lati, longi;
    public Integer signNo;

    /**
     * Creates new form FormGUI
     */
    public FormGUI() {
        initComponents();

        io = new DataIO();
        dirFiles = io.getImgFiles(); //file list
        dataSourceAbsPath = io.getDataSourcePath();
        imagesAbsPath = dataSourceAbsPath + "\\images";
        locationsAbsPath = dataSourceAbsPath + "\\location";
        if (dirFiles.length > 0) { //there are files to process
            io.openDB();
            nextBtn.doClick();
        } //TODO else message to user      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        calendarPanel1 = new com.github.lgooddatepicker.components.CalendarPanel();
        exitBtn = new javax.swing.JButton();
        SignTypeLbl = new javax.swing.JLabel();
        dateFromLbl = new javax.swing.JLabel();
        daysLbl = new javax.swing.JLabel();
        timeFromLbl = new javax.swing.JLabel();
        picNoTField = new javax.swing.JTextField();
        latitudeTField = new javax.swing.JTextField();
        longitudeTField = new javax.swing.JTextField();
        saveBtn = new javax.swing.JButton();
        pictureNoLbl = new javax.swing.JLabel();
        latitudeLbl = new javax.swing.JLabel();
        nextBtn = new javax.swing.JButton();
        longitudeLbl = new javax.swing.JLabel();
        previousBtn = new javax.swing.JButton();
        imageLbl = new javax.swing.JLabel();
        timeToLbl = new javax.swing.JLabel();
        signTypeCBox = new javax.swing.JComboBox<>();
        maxTimeLbl = new javax.swing.JLabel();
        dateToLbl = new javax.swing.JLabel();
        dateFromPicker = new com.github.lgooddatepicker.components.DatePicker();
        dateToPicker = new com.github.lgooddatepicker.components.DatePicker();
        maxTimePicker = new com.github.lgooddatepicker.components.TimePicker();
        timeFromPicker = new com.github.lgooddatepicker.components.TimePicker();
        timeToPicker = new com.github.lgooddatepicker.components.TimePicker();
        typeAlwaysCBox = new javax.swing.JCheckBox();
        leftDirectionCBox = new javax.swing.JCheckBox();
        rightDirectionCBox = new javax.swing.JCheckBox();
        allDaysCBox = new javax.swing.JCheckBox();
        dayMondayCBox = new javax.swing.JCheckBox();
        dayTuesdayCBox = new javax.swing.JCheckBox();
        dayWednesdayCBox = new javax.swing.JCheckBox();
        dayFridayCBox = new javax.swing.JCheckBox();
        dayThursdayCBox = new javax.swing.JCheckBox();
        daySaturdayCBox = new javax.swing.JCheckBox();
        daySundayCBox = new javax.swing.JCheckBox();
        copyPreviousBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        signNoTField = new javax.swing.JTextField();
        timeFromPicker2 = new com.github.lgooddatepicker.components.TimePicker();
        timeToPicker2 = new com.github.lgooddatepicker.components.TimePicker();
        timeFromPicker3 = new com.github.lgooddatepicker.components.TimePicker();
        timeToPicker3 = new com.github.lgooddatepicker.components.TimePicker();
        newSignBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sign Maintenance");
        setLocation(new java.awt.Point(500, 0));

        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        SignTypeLbl.setText("Sign Type:");

        dateFromLbl.setText("Date From:");

        daysLbl.setText("Days:");

        timeFromLbl.setText("Time From:");

        picNoTField.setEditable(false);

        latitudeTField.setEditable(false);

        longitudeTField.setEditable(false);

        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        pictureNoLbl.setText("File:");

        latitudeLbl.setText("Latitude:");

        nextBtn.setText("Next");
        nextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnActionPerformed(evt);
            }
        });

        longitudeLbl.setText("Longitude:");

        previousBtn.setText("Previous");
        previousBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousBtnActionPerformed(evt);
            }
        });

        imageLbl.setToolTipText("");

        timeToLbl.setText("To:");

        signTypeCBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No Parking", "No Stopping", "Parking" }));
        signTypeCBox.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                signTypeCBoxCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        maxTimeLbl.setText("Max. Time:");

        dateToLbl.setText("To:");

        typeAlwaysCBox.setText("Always");

        leftDirectionCBox.setText("Left Direction");

        rightDirectionCBox.setText("Right Direction");

        allDaysCBox.setText("All Days");
        allDaysCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allDaysCBoxActionPerformed(evt);
            }
        });

        dayMondayCBox.setText("Monday");

        dayTuesdayCBox.setText("Tuesday");

        dayWednesdayCBox.setText("Wednesday");
        dayWednesdayCBox.setMaximumSize(new java.awt.Dimension(67, 23));
        dayWednesdayCBox.setMinimumSize(new java.awt.Dimension(67, 23));

        dayFridayCBox.setText("Friday");

        dayThursdayCBox.setText("Thursday");
        dayThursdayCBox.setMaximumSize(new java.awt.Dimension(67, 23));
        dayThursdayCBox.setMinimumSize(new java.awt.Dimension(67, 23));

        daySaturdayCBox.setText("Saturday");

        daySundayCBox.setText("Sunday");

        copyPreviousBtn.setText("Copy Previous");
        copyPreviousBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyPreviousBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Sign No:");

        signNoTField.setEditable(false);

        newSignBtn.setText("New Sign");
        newSignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSignBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(latitudeLbl)
                    .addComponent(pictureNoLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(picNoTField)
                    .addComponent(latitudeTField))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(signNoTField, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(419, 419, 419))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(longitudeLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(longitudeTField, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(imageLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(daysLbl)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dayFridayCBox)
                            .addComponent(dayWednesdayCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(dayThursdayCBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(dayMondayCBox)
                                        .addComponent(dayTuesdayCBox))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(daySundayCBox)
                                        .addComponent(daySaturdayCBox))))
                            .addComponent(allDaysCBox)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SignTypeLbl)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(signTypeCBox, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(typeAlwaysCBox)
                            .addComponent(leftDirectionCBox)
                            .addComponent(rightDirectionCBox)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(maxTimeLbl)
                        .addGap(18, 18, 18)
                        .addComponent(maxTimePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dateFromLbl)
                            .addComponent(dateToLbl))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateToPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateFromPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(timeFromLbl)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(timeFromPicker3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(timeToPicker3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(timeFromPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(timeToLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timeToPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(timeFromPicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(timeToPicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(previousBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nextBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(newSignBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(copyPreviousBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(saveBtn)
                .addGap(18, 18, 18)
                .addComponent(exitBtn)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {copyPreviousBtn, newSignBtn, nextBtn, previousBtn});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dayFridayCBox, dayMondayCBox, daySaturdayCBox, daySundayCBox, dayThursdayCBox, dayTuesdayCBox, dayWednesdayCBox});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pictureNoLbl)
                            .addComponent(picNoTField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(imageLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(latitudeLbl)
                                    .addComponent(latitudeTField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(signNoTField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(longitudeLbl)
                            .addComponent(longitudeTField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SignTypeLbl)
                            .addComponent(signTypeCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(typeAlwaysCBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(leftDirectionCBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rightDirectionCBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(allDaysCBox, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(daysLbl))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dayTuesdayCBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(daySaturdayCBox)
                                    .addComponent(dayMondayCBox))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(daySundayCBox, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(3, 3, 3)
                        .addComponent(dayWednesdayCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dayThursdayCBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dayFridayCBox, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(timeFromLbl)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(timeToLbl)
                                    .addComponent(timeFromPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(timeToPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(timeFromPicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(timeToPicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(timeFromPicker3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(timeToPicker3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(maxTimeLbl)
                            .addComponent(maxTimePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dateFromLbl)
                            .addComponent(dateFromPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateToLbl)
                            .addComponent(dateToPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveBtn)
                    .addComponent(exitBtn)
                    .addComponent(previousBtn)
                    .addComponent(nextBtn)
                    .addComponent(copyPreviousBtn)
                    .addComponent(newSignBtn))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {dayFridayCBox, daySaturdayCBox, daySundayCBox, dayThursdayCBox, dayTuesdayCBox, dayWednesdayCBox});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {maxTimeLbl, maxTimePicker, timeFromLbl});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void processImgFile(String curImgFileName) {

        sign = io.getImageInfo(curImgFileName);
        sign.pf.signNo = 1;
        //resize image
        String inputImagePath = imagesAbsPath + "\\" + curImgFileName;
        String outputImagePath = dataSourceAbsPath + "\\" + "resizeTemp.jpg";
        try {
            double percent = 0.2;
            ImageResizer.resize(inputImagePath, outputImagePath, percent);
        } catch (IOException ex) {
            System.out.println("Error resizing image: " + inputImagePath);
        }
        // update image on screen using ImageIO
        try {
            imageLbl.setIcon(new ImageIcon(ImageIO.read(new File(outputImagePath))));
        } catch (IOException e) {
            e.printStackTrace();
        }

        // update screen for mongo Key Fields
        picNoTField.setText(sign.pf.fileNo);
        latitudeTField.setText(sign.latitude);
        longitudeTField.setText(sign.longitude);
        signNoTField.setText(String.valueOf(sign.pf.signNo));
        
        if (io.getMongoDoc(sign)) { //check if exist in mongo           
            signTypeCBox.setSelectedItem(sign.type);
            typeAlwaysCBox.setSelected(sign.typeAlways);
            leftDirectionCBox.setSelected(sign.leftDirection);
            rightDirectionCBox.setSelected(sign.rightDirection);
            allDaysCBox.setSelected(sign.allDays);
            daySundayCBox.setSelected(sign.days[0]);
            dayMondayCBox.setSelected(sign.days[1]);
            dayTuesdayCBox.setSelected(sign.days[2]);
            dayWednesdayCBox.setSelected(sign.days[3]);
            dayThursdayCBox.setSelected(sign.days[4]);
            dayFridayCBox.setSelected(sign.days[5]);
            daySaturdayCBox.setSelected(sign.days[6]);
            timeFromPicker.setText(sign.timeFrom);
            timeToPicker.setText(sign.timeTo);
            timeFromPicker2.setText(sign.timeFrom2);
            timeToPicker2.setText(sign.timeTo2);
            timeFromPicker3.setText(sign.timeFrom3);
            timeToPicker3.setText(sign.timeTo3);
            maxTimePicker.setText(sign.maxTime);
            dateFromPicker.setText(sign.dateFrom);
            dateToPicker.setText(sign.dateTo);
        } else {
            clearScreen();
            
        }
    }

 //reset screen fields    
    private void clearScreen() {            
            signTypeCBox.setSelectedItem("No Parking");
            typeAlwaysCBox.setSelected(false);
            leftDirectionCBox.setSelected(false);
            rightDirectionCBox.setSelected(false);
            allDaysCBox.setSelected(false);
            daySundayCBox.setSelected(false);
            dayMondayCBox.setSelected(false);
            dayTuesdayCBox.setSelected(false);
            dayWednesdayCBox.setSelected(false);
            dayThursdayCBox.setSelected(false);
            dayFridayCBox.setSelected(false);
            daySaturdayCBox.setSelected(false);
            timeFromPicker.setText("");
            timeToPicker.setText("");
            timeFromPicker2.setText("");
            timeToPicker2.setText("");
            timeFromPicker3.setText("");
            timeToPicker3.setText("");
            maxTimePicker.setText("");
            dateFromPicker.setText("");
            dateToPicker.setText("");
        }

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        // TODO add your handling code here:
        DataIO.closeDB();
        System.exit(0);
    }//GEN-LAST:event_exitBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        // validate fields
        // determine icon
        String signIcon = null;
        sign.type = signTypeCBox.getSelectedItem().toString();
        switch (sign.type) {
            case "No Parking":
                if (sign.typeAlways) {
                    signIcon = "NoParkingAlways.png";
                    if (sign.leftDirection) {
                        signIcon = "NoParkingLeftDirection.png";
                    }
                    if (sign.rightDirection) {
                        signIcon = "NoParkingRightDirection.png";
                    }
                    if (sign.rightDirection && sign.leftDirection) {
                        signIcon = "NoParkingBothDirection.png";
                    }
                } else {
                    signIcon = "NoParkingTimeRestriction.png";
                }
                break;
            case "No Stopping":
                if (sign.typeAlways) {
                    signIcon = "NoStoppingAlways.png";
                    if (sign.leftDirection) {
                        signIcon = "NoStoppingLeftDirection.png";
                    }
                    if (sign.rightDirection) {
                        signIcon = "NoStoppingRightDirection.png";
                    }
                    if (sign.rightDirection && sign.leftDirection) {
                        signIcon = "NoStoppingBothDirection.png";
                    }
                } else {
                    signIcon = "NoStoppingTimeRestriction.png";
                }
                break;
            case "Parking":
                if (sign.typeAlways) {
                    signIcon = "ParkingAlways.png";
                    if (sign.leftDirection) {
                        signIcon = "ParkingLeftDirection.png";
                    }
                    if (sign.rightDirection) {
                        signIcon = "ParkingRightDirection.png";
                    }
                    if (sign.rightDirection && sign.leftDirection) {
                        signIcon = "ParkingBothDirection.png";
                    }
                } else {
                    signIcon = "ParkingTimeRestriction.png";
                }
                break;
            default:
                signIcon = null;
                break;
        } //switch

        // set Sign data
        sign.icon = signIcon;
        sign.typeAlways = typeAlwaysCBox.isSelected();
        sign.leftDirection = leftDirectionCBox.isSelected();
        sign.rightDirection = rightDirectionCBox.isSelected();
        sign.allDays = allDaysCBox.isSelected();
        sign.days[0] = daySundayCBox.isSelected();
        sign.days[1] = dayMondayCBox.isSelected();
        sign.days[2] = dayTuesdayCBox.isSelected();
        sign.days[3] = dayWednesdayCBox.isSelected();
        sign.days[4] = dayThursdayCBox.isSelected();
        sign.days[5] = dayFridayCBox.isSelected();
        sign.days[6] = daySaturdayCBox.isSelected();
        sign.timeFrom = timeFromPicker.getTimeStringOrEmptyString();
        sign.timeTo = timeToPicker.getTimeStringOrEmptyString();
        sign.timeFrom2 = timeFromPicker2.getTimeStringOrEmptyString();
        sign.timeTo2 = timeToPicker2.getTimeStringOrEmptyString();
        sign.timeFrom3 = timeFromPicker3.getTimeStringOrEmptyString();
        sign.timeTo3 = timeToPicker3.getTimeStringOrEmptyString();
        sign.maxTime = maxTimePicker.getTimeStringOrEmptyString();
        sign.dateFrom = dateFromPicker.getDateStringOrEmptyString();
        sign.dateTo = dateToPicker.getDateStringOrEmptyString();
     
        sign.pf.signNo = Integer.parseInt(signNoTField.getText());

        io.saveToMongo(sign);
    }//GEN-LAST:event_saveBtnActionPerformed

    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed
        if (sign != null) { //for copyPreviousBtn
            previousSign = sign.clone();
        }  
        // get next sign image
        processImgFile(io.getNextImg(dirFiles));
    }//GEN-LAST:event_nextBtnActionPerformed

    private void previousBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousBtnActionPerformed
        // TO DO check for data fields change and confirm loss to go next
        // TO DO reset previous values of TFields
        // get revious sign image
        processImgFile(io.getPreviousImg(dirFiles));
    }//GEN-LAST:event_previousBtnActionPerformed

    private void signTypeCBoxCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_signTypeCBoxCaretPositionChanged
        sign.type = signTypeCBox.getSelectedItem().toString();
    }//GEN-LAST:event_signTypeCBoxCaretPositionChanged

    private void allDaysCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allDaysCBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_allDaysCBoxActionPerformed

    private void copyPreviousBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyPreviousBtnActionPerformed
        // update screen with previous doucument data
        signTypeCBox.setSelectedItem(previousSign.type);
        typeAlwaysCBox.setSelected(previousSign.typeAlways);
        leftDirectionCBox.setSelected(previousSign.leftDirection);
        rightDirectionCBox.setSelected(previousSign.rightDirection);
        allDaysCBox.setSelected(previousSign.allDays);
        daySundayCBox.setSelected(previousSign.days[0]);
        dayMondayCBox.setSelected(previousSign.days[1]);
        dayTuesdayCBox.setSelected(previousSign.days[2]);
        dayWednesdayCBox.setSelected(previousSign.days[3]);
        dayThursdayCBox.setSelected(previousSign.days[4]);
        dayFridayCBox.setSelected(previousSign.days[5]);
        daySaturdayCBox.setSelected(previousSign.days[6]);
        timeFromPicker.setText(previousSign.timeFrom);
        timeToPicker.setText(previousSign.timeTo);
        timeFromPicker2.setText(previousSign.timeFrom2);
        timeToPicker2.setText(previousSign.timeTo2);
        timeFromPicker3.setText(previousSign.timeFrom3);
        timeToPicker3.setText(previousSign.timeTo3);
        maxTimePicker.setText(previousSign.maxTime);
        dateFromPicker.setText(previousSign.dateFrom);
        dateToPicker.setText(previousSign.dateTo);
    }//GEN-LAST:event_copyPreviousBtnActionPerformed

    private void newSignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSignBtnActionPerformed
        // More than 1 sign in picture file
        //TODO test if current signNo document saved
        // clear screen fields but key. +1 signNo
        signNo += 1;
        clearScreen();
        signNoTField.setText(String.valueOf(signNo));
    }//GEN-LAST:event_newSignBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel SignTypeLbl;
    private javax.swing.JCheckBox allDaysCBox;
    private com.github.lgooddatepicker.components.CalendarPanel calendarPanel1;
    private javax.swing.JButton copyPreviousBtn;
    private javax.swing.JLabel dateFromLbl;
    private com.github.lgooddatepicker.components.DatePicker dateFromPicker;
    private javax.swing.JLabel dateToLbl;
    private com.github.lgooddatepicker.components.DatePicker dateToPicker;
    private javax.swing.JCheckBox dayFridayCBox;
    private javax.swing.JCheckBox dayMondayCBox;
    private javax.swing.JCheckBox daySaturdayCBox;
    private javax.swing.JCheckBox daySundayCBox;
    private javax.swing.JCheckBox dayThursdayCBox;
    private javax.swing.JCheckBox dayTuesdayCBox;
    private javax.swing.JCheckBox dayWednesdayCBox;
    private javax.swing.JLabel daysLbl;
    private javax.swing.JButton exitBtn;
    private javax.swing.JLabel imageLbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel latitudeLbl;
    private javax.swing.JTextField latitudeTField;
    private javax.swing.JCheckBox leftDirectionCBox;
    private javax.swing.JLabel longitudeLbl;
    private javax.swing.JTextField longitudeTField;
    private javax.swing.JLabel maxTimeLbl;
    private com.github.lgooddatepicker.components.TimePicker maxTimePicker;
    private javax.swing.JButton newSignBtn;
    private javax.swing.JButton nextBtn;
    private javax.swing.JTextField picNoTField;
    private javax.swing.JLabel pictureNoLbl;
    private javax.swing.JButton previousBtn;
    private javax.swing.JCheckBox rightDirectionCBox;
    private javax.swing.JButton saveBtn;
    private javax.swing.JTextField signNoTField;
    private javax.swing.JComboBox<String> signTypeCBox;
    private javax.swing.JLabel timeFromLbl;
    private com.github.lgooddatepicker.components.TimePicker timeFromPicker;
    private com.github.lgooddatepicker.components.TimePicker timeFromPicker2;
    private com.github.lgooddatepicker.components.TimePicker timeFromPicker3;
    private javax.swing.JLabel timeToLbl;
    private com.github.lgooddatepicker.components.TimePicker timeToPicker;
    private com.github.lgooddatepicker.components.TimePicker timeToPicker2;
    private com.github.lgooddatepicker.components.TimePicker timeToPicker3;
    private javax.swing.JCheckBox typeAlwaysCBox;
    // End of variables declaration//GEN-END:variables
}
